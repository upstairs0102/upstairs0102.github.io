<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Thunder Boy</title>
    <link>https://upstairs0102.github.io/categories/javascript/</link>
    <description>Recent content in Javascript on Thunder Boy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Dec 2019 16:04:00 +0000</lastBuildDate>
    
	<atom:link href="https://upstairs0102.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>(譯)Vue.js App效能優化: part3 – Lazy loading Vuex modules</title>
      <link>https://upstairs0102.github.io/2019/12/24/vue-optimization3/</link>
      <pubDate>Tue, 24 Dec 2019 16:04:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2019/12/24/vue-optimization3/</guid>
      <description>在前一個部份我們學到可以大幅度改善你的應用程式效能的模式 – 透過路由來切割程式碼。僅管透過路由切割程式碼是非常有幫助的但仍然有很多程式是使用者</description>
    </item>
    
    <item>
      <title>(譯)Vue.js App效能優化: part2 – Lazy loading路由及第三方庫打包反向模式(anti-pattern)</title>
      <link>https://upstairs0102.github.io/2019/12/24/vue-optimization2/</link>
      <pubDate>Tue, 24 Dec 2019 16:02:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2019/12/24/vue-optimization2/</guid>
      <description>在前一篇文章當中我們學到了什麼是切割程式碼、它是如何運作的以及在Vue.js應用程式中如何和lazy loading一起使用。現在我們將稍微深</description>
    </item>
    
    <item>
      <title>(譯)Vue.js App 效能優化: part1 – 效能優化和lazy loading</title>
      <link>https://upstairs0102.github.io/2019/12/24/vue-optimization1/</link>
      <pubDate>Tue, 24 Dec 2019 16:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2019/12/24/vue-optimization1/</guid>
      <description>譯者說明 最近使用Vue.js投入公司產品開發花了不少心血，關於前端的效能是一件很重要的事情，這個系列文有做了一些有趣的探討，原文作者似乎也還</description>
    </item>
    
    <item>
      <title>從D3.js的select(this)探討的函式中的this指向</title>
      <link>https://upstairs0102.github.io/2019/12/22/d3js-select-this/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2019/12/22/d3js-select-this/</guid>
      <description>其實這個標題下的有點不太精確，但我想從我自己本身遇到的問題的角度來切入，然後再進一步深入說明… 事情是這樣的，在函式中使用d3.select(</description>
    </item>
    
  </channel>
</rss>