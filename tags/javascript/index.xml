<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Thunder Boy Dev Blog</title>
    <link>https://upstairs0102.github.io/tags/javascript/</link>
    <description>Recent content in javascript on Thunder Boy Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Dec 2022 06:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://upstairs0102.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>前端專案各種node環境神秘問題解決</title>
      <link>https://upstairs0102.github.io/2022/12/21/node-env-problems-of-frontend-project-solved/</link>
      <pubDate>Wed, 21 Dec 2022 06:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2022/12/21/node-env-problems-of-frontend-project-solved/</guid>
      <description>前言 開發 Vue專案過程當中遇過各種node環境的神秘問題。最奇怪的是本機端的 node版本和 server端完全相同，但是本機端的 npm instal</description>
    </item>
    
    <item>
      <title>第一次發布 npm前端套件就上手</title>
      <link>https://upstairs0102.github.io/2022/12/15/publish-js-library-to-npm/</link>
      <pubDate>Thu, 15 Dec 2022 06:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2022/12/15/publish-js-library-to-npm/</guid>
      <description>一、前情提要 本篇文章以我自己開發的一個 library - vue-component-sandbox作為範例，說明發佈 javascript程式到 npm上面所</description>
    </item>
    
    <item>
      <title>xlsx-js-style 前端匯出自訂樣式Excel檔</title>
      <link>https://upstairs0102.github.io/2022/12/07/xlsx-js-style/</link>
      <pubDate>Wed, 07 Dec 2022 08:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2022/12/07/xlsx-js-style/</guid>
      <description>前言 基於某些原因最近有在前端匯出excel檔、並且有自訂欄位樣式的需求。雖然以前就有開發過前端匯出Excel的功能，而且套件選擇也還算多實作</description>
    </item>
    
    <item>
      <title>Next.js上使用 Redux四兄弟</title>
      <link>https://upstairs0102.github.io/2021/05/23/lib-of-redux-on-next/</link>
      <pubDate>Sun, 23 May 2021 02:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2021/05/23/lib-of-redux-on-next/</guid>
      <description>前言 身為使用 Vue.js的開發者，最近在研究 React.js以及 Next.js，原本以為有了使用 Vuex（和 Redux 一樣取自 Flux的概念發展出來</description>
    </item>
    
    <item>
      <title>相容 Vue2及 Vue3環境的 Component寫法</title>
      <link>https://upstairs0102.github.io/2021/02/09/compatible-vue2-and-vue3/</link>
      <pubDate>Tue, 09 Feb 2021 03:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2021/02/09/compatible-vue2-and-vue3/</guid>
      <description>前言 理論上 Vue3.x大多數的寫法是有向下相容 Vue2.x的寫法，所以理論上.vue檔Component的寫法只要同時符合 Vue3.x和 Vu</description>
    </item>
    
    <item>
      <title>Vue2的 Option-Based Component中使用Typescript的簡易方式</title>
      <link>https://upstairs0102.github.io/2021/02/09/vue-option-based-component-with-typescript/</link>
      <pubDate>Tue, 09 Feb 2021 02:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2021/02/09/vue-option-based-component-with-typescript/</guid>
      <description>前言 之前使用 Vue2.x開發時又想使用 Typescript，當時遇到的困擾是… Component使用 Typescript時根本就吃不到 thi</description>
    </item>
    
    <item>
      <title>Vue Option &amp; Composition Api 寫法對照範例</title>
      <link>https://upstairs0102.github.io/2021/02/09/vue-option-and-composition-api-compare/</link>
      <pubDate>Tue, 09 Feb 2021 01:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2021/02/09/vue-option-and-composition-api-compare/</guid>
      <description>使用Vue2.x開發了一段時間，最近在研究升級Vue3.0之後新的寫法。雖然說新的 Composition Api是一大特點，但官方好像也沒有將舊的Option寫法</description>
    </item>
    
    <item>
      <title>Vue父子組件資料流設計 (3) 雙向綁定–大組件</title>
      <link>https://upstairs0102.github.io/2020/05/09/vue-component-dataflow-3/</link>
      <pubDate>Sat, 09 May 2020 00:00:02 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2020/05/09/vue-component-dataflow-3/</guid>
      <description>落落長的前言 雖然說Vue上手容易，就以我來說我剛開始學習的時候幾乎是網路上看了幾篇文章就開始寫了，但是後來就吃了很多悶虧，慢慢在各專案中累積</description>
    </item>
    
    <item>
      <title>Vue父子組件資料流設計 (2) 雙向綁定–通用組件</title>
      <link>https://upstairs0102.github.io/2020/05/09/vue-component-dataflow-2/</link>
      <pubDate>Sat, 09 May 2020 00:00:01 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2020/05/09/vue-component-dataflow-2/</guid>
      <description>落落長的前言 雖然說Vue上手容易，就以我來說我剛開始學習的時候幾乎是網路上看了幾篇文章就開始寫了，但是後來就吃了很多悶虧，慢慢在各專案中累積</description>
    </item>
    
    <item>
      <title>Vue父子組件資料流設計 (1) 單向傳遞</title>
      <link>https://upstairs0102.github.io/2020/05/09/vue-component-dataflow-1/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2020/05/09/vue-component-dataflow-1/</guid>
      <description>落落長的前言 雖然說Vue上手容易，就以我來說我剛開始學習的時候幾乎是網路上看了幾篇文章就開始寫了，但是後來就吃了很多悶虧，慢慢在各專案中累積</description>
    </item>
    
    <item>
      <title>簡單看Javascript的傳值以及傳參考</title>
      <link>https://upstairs0102.github.io/2020/02/28/js-call-by-reference/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2020/02/28/js-call-by-reference/</guid>
      <description>這是Javascript的一個經典的觀念題–「傳值」以及「傳參考」(call by value/call by reference，或者pass by value/pass by reference)</description>
    </item>
    
    <item>
      <title>(譯)Vue.js App效能優化: part3 – Lazy loading Vuex modules</title>
      <link>https://upstairs0102.github.io/2019/12/24/vue-optimization3/</link>
      <pubDate>Tue, 24 Dec 2019 16:04:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2019/12/24/vue-optimization3/</guid>
      <description>在前一個部份我們學到可以大幅度改善你的應用程式效能的模式 – 透過路由來切割程式碼。僅管透過路由切割程式碼是非常有幫助的但仍然有很多程式是使用者</description>
    </item>
    
    <item>
      <title>(譯)Vue.js App效能優化: part2 – Lazy loading路由及第三方庫打包反向模式(anti-pattern)</title>
      <link>https://upstairs0102.github.io/2019/12/24/vue-optimization2/</link>
      <pubDate>Tue, 24 Dec 2019 16:02:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2019/12/24/vue-optimization2/</guid>
      <description>在前一篇文章當中我們學到了什麼是切割程式碼、它是如何運作的以及在Vue.js應用程式中如何和lazy loading一起使用。現在我們將稍微深</description>
    </item>
    
    <item>
      <title>(譯)Vue.js App 效能優化: part1 – 效能優化和lazy loading</title>
      <link>https://upstairs0102.github.io/2019/12/24/vue-optimization1/</link>
      <pubDate>Tue, 24 Dec 2019 16:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2019/12/24/vue-optimization1/</guid>
      <description>譯者說明 最近使用Vue.js投入公司產品開發花了不少心血，關於前端的效能是一件很重要的事情，這個系列文有做了一些有趣的探討，原文作者似乎也還</description>
    </item>
    
    <item>
      <title>從D3.js的select(this)探討的函式中的this指向</title>
      <link>https://upstairs0102.github.io/2019/12/22/d3js-select-this/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://upstairs0102.github.io/2019/12/22/d3js-select-this/</guid>
      <description>其實這個標題下的有點不太精確，但我想從我自己本身遇到的問題的角度來切入，然後再進一步深入說明… 事情是這樣的，在函式中使用d3.select(</description>
    </item>
    
  </channel>
</rss>